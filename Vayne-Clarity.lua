--[[Clarity Vayne 1.1]]

--Changelog ver 1.1 Added E to proc silver bolt passive when u press C (aa<Q<aa<E) for harass

assert(load(Base64Decode(
"
	

--[[Vayne by Team Clarity]]



if myHero.charName ~= 'Vayne' then return end
assert(load(Base64Decode("G0x1YVIAAQQEBAgAGZMNChoKAAAAAAAAAAAAAQIKAAAABgBAAEFAAAAdQAABBkBAAGUAAAAKQACBBkBAAGVAAAAKQICBHwCAAAQAAAAEBgAAAGNsYXNzAAQNAAAAU2NyaXB0U3RhdHVzAAQHAAAAX19pbml0AAQLAAAAU2VuZFVwZGF0ZQACAAAAAgAAAAgAAAACAAotAAAAhkBAAMaAQAAGwUAABwFBAkFBAQAdgQABRsFAAEcBwQKBgQEAXYEAAYbBQACHAUEDwcEBAJ2BAAHGwUAAxwHBAwECAgDdgQABBsJAAAcCQQRBQgIAHYIAARYBAgLdAAABnYAAAAqAAIAKQACFhgBDAMHAAgCdgAABCoCAhQqAw4aGAEQAx8BCAMfAwwHdAIAAnYAAAAqAgIeMQEQAAYEEAJ1AgAGGwEQA5QAAAJ1AAAEfAIAAFAAAAAQFAAAAaHdpZAAEDQAAAEJhc2U2NEVuY29kZQAECQAAAHRvc3RyaW5nAAQDAAAAb3MABAcAAABnZXRlbnYABBUAAABQUk9DRVNTT1JfSURFTlRJRklFUgAECQAAAFVTRVJOQU1FAAQNAAAAQ09NUFVURVJOQU1FAAQQAAAAUFJPQ0VTU09SX0xFVkVMAAQTAAAAUFJPQ0VTU09SX1JFVklTSU9OAAQEAAAAS2V5AAQHAAAAc29ja2V0AAQIAAAAcmVxdWlyZQAECgAAAGdhbWVTdGF0ZQAABAQAAAB0Y3AABAcAAABhc3NlcnQABAsAAABTZW5kVXBkYXRlAAMAAAAAAADwPwQUAAAAQWRkQnVnc3BsYXRDYWxsYmFjawABAAAACAAAAAgAAAAAAAMFAAAABQAAAAwAQACBQAAAHUCAAR8AgAACAAAABAsAAABTZW5kVXBkYXRlAAMAAAAAAAAAQAAAAAABAAAAAQAQAAAAQG9iZnVzY2F0ZWQubHVhAAUAAAAIAAAACAAAAAgAAAAIAAAACAAAAAAAAAABAAAABQAAAHNlbGYAAQAAAAAAEAAAAEBvYmZ1c2NhdGVkLmx1YQAtAAAAAwAAAAMAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABgAAAAYAAAAGAAAABgAAAAUAAAADAAAAAwAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAIAAAACAAAAAgAAAAIAAAAAgAAAAUAAABzZWxmAAAAAAAtAAAAAgAAAGEAAAAAAC0AAAABAAAABQAAAF9FTlYACQAAAA4AAAACAA0XAAAAhwBAAIxAQAEBgQAAQcEAAJ1AAAKHAEAAjABBAQFBAQBHgUEAgcEBAMcBQgABwgEAQAKAAIHCAQDGQkIAx4LCBQHDAgAWAQMCnUCAAYcAQACMAEMBnUAAAR8AgAANAAAABAQAAAB0Y3AABAgAAABjb25uZWN0AAQRAAAAc2NyaXB0c3RhdHVzLm5ldAADAAAAAAAAVEAEBQAAAHNlbmQABAsAAABHRVQgL3N5bmMtAAQEAAAAS2V5AAQCAAAALQAEBQAAAGh3aWQABAcAAABteUhlcm8ABAkAAABjaGFyTmFtZQAEJgAAACBIVFRQLzEuMA0KSG9zdDogc2NyaXB0c3RhdHVzLm5ldA0KDQoABAYAAABjbG9zZQAAAAAAAQAAAAAAEAAAAEBvYmZ1c2NhdGVkLmx1YQAXAAAACgAAAAoAAAAKAAAACgAAAAoAAAALAAAACwAAAAsAAAALAAAADAAAAAwAAAANAAAADQAAAA0AAAAOAAAADgAAAA4AAAAOAAAACwAAAA4AAAAOAAAADgAAAA4AAAACAAAABQAAAHNlbGYAAAAAABcAAAACAAAAYQAAAAAAFwAAAAEAAAAFAAAAX0VOVgABAAAAAQAQAAAAQG9iZnVzY2F0ZWQubHVhAAoAAAABAAAAAQAAAAEAAAACAAAACAAAAAIAAAAJAAAADgAAAAkAAAAOAAAAAAAAAAEAAAAFAAAAX0VOVgA="), nil, "bt", _ENV))() ScriptStatus("WJMLKQKRPPP") 

if not VIP_USER then return end



require "SxOrbWalk"

 

local AA = Aa
local Q = {range = 300, IsReady = function() return myHero:CanUseSpell(_Q) == READY end}
local E = {range = 550, delay = 0.25, speed = 2200, width = nil,IsReady = function() return myHero:CanUseSpell(_E) == READY end}
local R = {range = 1100, IsReady = function() return myHero:CanUseSpell(_R) == READY end}
local ignite = nil
local iDmg = 0
local informationTable = {}
local spellExpired = true
local target = nil
local ts
local ts = TargetSelector(TARGET_PRIORITY, 2150, DAMAGE_MAGIC, true)
local myTarget = nil
local Killable = false
local LastAlert = 0
local TrackSpells = {_Q, _W, _E, _R, SUMMONER_1, SUMMONER_2}
local SpellsData = {}
local TickLimit = 0
local FirstTick = false
local enemyTable = GetEnemyHeroes()
local tp = TargetPredictionVIP(1000, 2200, 0.25)
local AllClassMenu = 16
-----------------------------------------------------------------------------------------------------------------------------

local SSpells = {		{CName="Flash", Name="summonerflash", Color={255, 255, 255, 0} },
						{CName="Ghost", Name="summonerhaste", Color={255, 0, 0, 255} },
						{CName="Ignite", Name="summonerdot", Color={255, 255, 0, 0 }},
						{CName="Barrier", Name="summonerbarrier", Color={255, 209, 143, 0}},
						{CName="Smite", Name="summonersmite", Color={255, 209, 143, 0}},
						{CName="Exhaust", Name="summonerexhaust", Color={255, 209, 143, 0}},
						{CName="Heal", Name="summonerheal", Color={255, 0, 255, 0}},
						{CName="Teleport", Name="summonerteleport", Color={255, 192, 0, 209}},
						{CName="Cleanse", Name="summonerboost", Color={255, 255, 138, 181}},
						{CName="Clarity", Name="summonermana", Color={255, 0, 110, 255}},
						{CName="Clairvoyance", Name="summonerclairvoyance", Color={255, 0, 110, 255}},
						{CName="Revive", Name="summonerrevive", Color={255, 0, 255, 0}},
						{CName="Garrison", Name="summonerodingarrison", Color={255, 0, 110, 255}},
						{CName="The Rest", Name="TheRest", Color={255, 255, 255, 255}},
						}

local ToInterrupt = {}
local InterruptList = {
    { charName = "Caitlyn", spellName = "CaitlynAceintheHole"},
    { charName = "FiddleSticks", spellName = "Crowstorm"},
    { charName = "FiddleSticks", spellName = "DrainChannel"},
    { charName = "Galio", spellName = "GalioIdolOfDurand"},
    { charName = "Karthus", spellName = "FallenOne"},
    { charName = "Katarina", spellName = "KatarinaR"},
    { charName = "Lucian", spellName = "LucianR"},
    { charName = "Malzahar", spellName = "AlZaharNetherGrasp"},
    { charName = "MissFortune", spellName = "MissFortuneBulletTime"},
    { charName = "Nunu", spellName = "AbsoluteZero"},                            
    { charName = "Pantheon", spellName = "Pantheon_GrandSkyfall_Jump"},
    { charName = "Shen", spellName = "ShenStandUnited"},
    { charName = "Urgot", spellName = "UrgotSwap2"},
    { charName = "Varus", spellName = "VarusQ"},
	{ charName = "Warwick", spellName = "InfiniteDuress"},
	{ charName = "Velkoz", spellName = "VelkozR"}
}

local EnemyTable = {}
local TimeMissing = {}
local SurprizeTime = {}
local DistanceToEnemy = {}
local EnemyVisible = {}
local Drawed = {}
local LastDraw = {}
local EnemyDead = {}
local Appeared = {}
local Dissapeared = {}

local blackColor  = 4278190080
local purpleColor = 4294902015
local greenColor  = 4278255360
local aquaColor = ARGB(255,102, 205, 170)

local whiteColor = ARGB(255,255, 255, 255)
local grayColor = ARGB(255, 200, 200, 200)





---------------------------------------------------------------------------------------


function GetCustomTarget()
	ts:update()
	if _G.AutoCarry and ValidTarget(_G.AutoCarry.Crosshair:GetTarget()) then return _G.AutoCarry.Crosshair:GetTarget() end
	if not _G.Reborn_Loaded then return ts.target end
	if ValidTarget(SelectedTarget) then return SelectedTarget end
	return ts.target
end

function OnLoad()
   
	checkFountain = (GetGame().map.index ~= 7 and GetGame().map.index ~= 12) -- no heal in Proving Ground / ARAM  
	PrintChat("<font color=\"#00FF00\">Vayne by Team Clarity.</font>")
	ItemNames				= {
		[3303]				= "ArchAngelsDummySpell",
		[3007]				= "ArchAngelsDummySpell",
		[3144]				= "BilgewaterCutlass",
		[3188]				= "ItemBlackfireTorch",
		[3153]				= "ItemSwordOfFeastAndFamine",
		[3405]				= "TrinketSweeperLvl1",
		[3411]				= "TrinketOrbLvl1",
		[3166]				= "TrinketTotemLvl1",
		[3450]				= "OdinTrinketRevive",
		[2041]				= "ItemCrystalFlask",
		[2054]				= "ItemKingPoroSnack",
		[2138]				= "ElixirOfIron",
		[2137]				= "ElixirOfRuin",
		[2139]				= "ElixirOfSorcery",
		[2140]				= "ElixirOfWrath",
		[3184]				= "OdinEntropicClaymore",
		[2050]				= "ItemMiniWard",
		[3401]				= "HealthBomb",
		[3363]				= "TrinketOrbLvl3",
		[3092]				= "ItemGlacialSpikeCast",
		[3460]				= "AscWarp",
		[3361]				= "TrinketTotemLvl3",
		[3362]				= "TrinketTotemLvl4",
		[3159]				= "HextechSweeper",
		[2051]				= "ItemHorn",
		--[2003]			= "RegenerationPotion",
		[3146]				= "HextechGunblade",
		[3187]				= "HextechSweeper",
		[3190]				= "IronStylus",
		[2004]				= "FlaskOfCrystalWater",
		[3139]				= "ItemMercurial",
		[3222]				= "ItemMorellosBane",
		[3042]				= "Muramana",
		[3043]				= "Muramana",
		[3180]				= "OdynsVeil",
		[3056]				= "ItemFaithShaker",
		[2047]				= "OracleExtractSight",
		[3364]				= "TrinketSweeperLvl3",
		[2052]				= "ItemPoroSnack",
		[3140]				= "QuicksilverSash",
		[3143]				= "RanduinsOmen",
		[3074]				= "ItemTiamatCleave",
		[3800]				= "ItemRighteousGlory",
		[2045]				= "ItemGhostWard",
		[3342]				= "TrinketOrbLvl1",
		[3040]				= "ItemSeraphsEmbrace",
		[3048]				= "ItemSeraphsEmbrace",
		[2049]				= "ItemGhostWard",
		[3345]				= "OdinTrinketRevive",
		[2044]				= "SightWard",
		[3341]				= "TrinketSweeperLvl1",
		[3069]				= "shurelyascrest",
		[3599]				= "KalistaPSpellCast",
		[3185]				= "HextechSweeper",
		[3077]				= "ItemTiamatCleave",
		[2009]				= "ItemMiniRegenPotion",
		[2010]				= "ItemMiniRegenPotion",
		[3023]				= "ItemWraithCollar",
		[3290]				= "ItemWraithCollar",
		[2043]				= "VisionWard",
		[3340]				= "TrinketTotemLvl1",
		[3090]				= "ZhonyasHourglass",
		[3154]				= "wrigglelantern",
		[3142]				= "YoumusBlade",
		[3157]				= "ZhonyasHourglass",
		[3512]				= "ItemVoidGate",
		[3131]				= "ItemSoTD",
		[3137]				= "ItemDervishBlade",
		[3352]				= "RelicSpotter",
		[3350]				= "TrinketTotemLvl2",
	}
	_G.ITEM_1				= 06
	_G.ITEM_2				= 07
	_G.ITEM_3				= 08
	_G.ITEM_4				= 09
	_G.ITEM_5				= 10
	_G.ITEM_6				= 11
	_G.ITEM_7				= 12
	
	___GetInventorySlotItem	= rawget(_G, "GetInventorySlotItem")
	_G.GetInventorySlotItem	= GetSlotItem
    myHero = GetMyHero()
	priorityTable = {
			AP = {
				"Annie", "Ahri", "Akali", "Anivia", "Annie", "Brand", "Cassiopeia", "Diana", "Evelynn", "FiddleSticks", "Fizz", "Gragas", "Heimerdinger", "Karthus",
				"Kassadin", "Ezreal", "Kayle", "Kennen", "Leblanc", "Lissandra", "Lux", "Malzahar", "Mordekaiser", "Morgana", "Nidalee", "Orianna",
				"Ryze", "Sion", "Swain", "Syndra", "Teemo", "TwistedFate", "Veigar", "Viktor", "Vladimir", "Xerath", "Ziggs", "Zyra", "Velkoz"
			},
			
			Support = {
				"Alistar", "Blitzcrank", "Janna", "Karma", "Leona", "Lulu", "Nami", "Nunu", "Sona", "Soraka", "Taric", "Thresh", "Zilean", "Braum"
			},
			
			Tank = {
				"Amumu", "Chogath", "DrMundo", "Galio", "Hecarim", "Malphite", "Maokai", "Nasus", "Rammus", "Sejuani", "Nautilus", "Shen", "Singed", "Skarner", "Volibear",
				"Warwick", "Yorick", "Zac"
			},
			
			AD_Carry = {
				"Ashe", "Caitlyn", "Corki", "Draven", "Ezreal", "Graves", "Jayce", "Jinx", "KogMaw", "Lucian", "MasterYi", "MissFortune", "Pantheon", "Quinn", "Shaco", "Sivir",
				"Talon","Tryndamere", "Tristana", "Twitch", "Urgot", "Varus", "Vayne", "Yasuo", "Zed"
			},
			
			Bruiser = {
				"Aatrox", "Darius", "Elise", "Fiora", "Gangplank", "Garen", "Irelia", "JarvanIV", "Jax", "Khazix", "LeeSin", "Nocturne", "Olaf", "Poppy",
				"Renekton", "Rengar", "Riven", "Rumble", "Shyvana", "Trundle", "Udyr", "Vi", "MonkeyKing", "XinZhao"
			}
	}
	 if GetGame().map.shortName == "twistedTreeline" then
		TwistedTreeline = true 
	else
		TwistedTreeline = false
	end

	checkDistance = 3000 * 3000
	IgniteCheck()
	FLoadLib()
	
	
    _G.oldDrawCircle = rawget(_G, 'DrawCircle')
	_G.DrawCircle = DrawCircle2
	
	 allyTurretColor = 0x064700                      
     enemyTurretColor = 0xFF0000             
     visibilityTurretColor = 0x470000        
     drawTurrets = {}
	 EnemyTable = GetEnemyHeroes()
    for i, Enemy in pairs(EnemyTable) do
        EnemyVisible[i] = Enemy.visible
        DistanceToEnemy[i] = myHero:GetDistance(Enemy)
        TimeMissing[i] = 0
        SurprizeTime[i] = 0
        Appeared[i] = false
        Drawed[i] = false
        LastDraw[i] = 0
        EnemyDead[i] = false
        Dissapeared[i] = false
    end 

	placedWards = {}
	TriggerTrap()
	
	PriorityOnLoad()
	
	Minions = minionManager(MINION_ENEMY, 550, myHero, MINION_SORT_MAXHEALTH_ASC)
	JungleMinions = minionManager(MINION_JUNGLE, 550, myHero, MINION_SORT_MAXHEALTH_DEC)
    
end


function OnTick()
	target = GetCustomTarget()
	Checks()
	
    
end

function OnDraw()
	if HazMenu.Draw.drawq then
		DrawCircle(myHero.x,myHero.y,myHero.z,300,0xCCFF33)
	end 				
	if HazMenu.Draw.drawe then
		DrawCircle(myHero.x,myHero.y,myHero.z,630,0x3300CC)
	end
	
	if HazMenu.Draw.drawt and ValidTarget(target) then
		DrawCircle(target.x, target.y, target.z, 80, ARGB(255, 10, 255, 10))
	    DrawCircle(target.x, target.y, target.z, 100, ARGB(255, 102, 204, 51))
	end	
	
	
	if HazMenu.CoolDowns.ON then
	CDDraws()
	end
	if HazMenu.Draw.TowerR then
	   turrets()
	end
	if HazMenu.Draw.awarness.Gank then
	  awarness()
	end
	if HazMenu.Draw.Wards.ON then
	  wards()
	end
	if HazMenu.Condemn.autoCondemn and HazMenu.combokey then
	  condemn()
	end
end


function Checks()
	IREADY = (ignite ~= nil and myHero:CanUseSpell(ignite) == READY)
	QREADY = (myHero:CanUseSpell(_Q) == READY)	
	EREADY = (myHero:CanUseSpell(_E) == READY)
	RREADY = (myHero:CanUseSpell(_R) == READY)
	
	LFCfunc()
	SpellExpired()
	tracker()
	turretranges()
	gankalerter()
	
	if ValidTarget(target) then
		if HazMenu.Misc.KS then KS(target) end
		if HazMenu.Misc.Ignite then AutoIgnite(target) end
	    
	   
	end
	
	if HazMenu.Draw.Wards.Manual then
      if HazMenu.Draw.Wards.DeleteWard then DeleteWard(mousePos.x, mousePos.y, mousePos.z) end

      if HazMenu.Draw.Wards.PutWard1 then PutWard(mousePos.x, mousePos.y, mousePos.z, 1 * 60) end
      if HazMenu.Draw.Wards.PutWard2 then PutWard(mousePos.x, mousePos.y, mousePos.z, 2 * 60) end
      if HazMenu.Draw.Wards.PutWard3 then PutWard(mousePos.x, mousePos.y, mousePos.z, 3 * 60) end
    end
	
	
	
	if HazMenu.Farm.Mana then end
	if HazMenu.Harass.Mana then end
		
    if HazMenu.combokey then
	 castR()
	end
	if HazMenu.Misc.Bork and HazMenu.combokey then
	 Bork()
	end
    if HazMenu.Misc.Bilge and HazMenu.combokey then
     Bilge()
    end	
end

function IgniteCheck()
	if myHero:GetSpellData(SUMMONER_1).name:find("summonerdot") then
		ignite = SUMMONER_1
	elseif myHero:GetSpellData(SUMMONER_2).name:find("summonerdot") then
		ignite = SUMMONER_2
	end
end

function FLoadLib()
	FMenu()
end

function FMenu()
	HazMenu = scriptConfig("Clarity Vayne", "Vayne")
		HazMenu:addParam("combokey", "Combo key(Space)", SCRIPT_PARAM_ONKEYDOWN, false, 32)
		HazMenu:addParam("harasskey", "Harass key(C)", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("C"))
		HazMenu:addParam("farmkey", "Farm key(V)", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("V"))
	    
		
	HazMenu:addTS(ts)
		
	HazMenu:addSubMenu("Combo", "Combo")
		HazMenu.Combo:addParam("comboQ", "Use Q", SCRIPT_PARAM_ONOFF, true)				
		HazMenu.Combo:addParam("comboR", "Use R", SCRIPT_PARAM_ONOFF, true)		
		HazMenu.Combo:addParam("focus", "Left Click Focus", SCRIPT_PARAM_ONOFF, true)	    		 
		HazMenu.Combo:addParam("minR", "Ulti only if X enemies", SCRIPT_PARAM_SLICE, 1, 0, 5, 0) 
		 
	HazMenu:addSubMenu("Condemn", "Condemn")
	    HazMenu.Condemn:addSubMenu("Features & Settings", "settingsSubMenu")
		HazMenu.Condemn:addSubMenu("Disable Auto-Condemn on", "condemnSubMenu")	
		HazMenu.Condemn:addParam("autoCondemn", "Auto-Condemn Toggle:", SCRIPT_PARAM_ONKEYTOGGLE, true, GetKey("N"))
		HazMenu.Condemn:addParam("switchKey", "Switch key mode:", SCRIPT_PARAM_ONOFF, false)
		   HazMenu.Condemn.settingsSubMenu:addParam("CondemnAssistant", "Condemn Visual Assistant:", SCRIPT_PARAM_ONOFF, true)
		   HazMenu.Condemn.settingsSubMenu:addParam("pushDistance", "Push Distance", SCRIPT_PARAM_SLICE, 350, 0, 450, 0)		   
		   if not VIP_USER then
		   HazMenu.Condemn.settingsSubMenu:addParam("shootingMode", "Currently: No prediction", SCRIPT_PARAM_INFO, "NOT VIP")
		   else
		   HazMenu.Condemn.settingsSubMenu:addParam("shootingMode", "Prediction/No prediction:", SCRIPT_PARAM_ONOFF, true)
		   end
		HazMenu.Condemn.autoCondemn = true
		HazMenu.Condemn.switchKey = false
		   for i, enemy in ipairs(enemyTable) do
		   HazMenu.Condemn.condemnSubMenu:addParam("disableCondemn"..i, " >> "..enemy.charName, SCRIPT_PARAM_ONOFF, false)
		   HazMenu.Condemn["disableCondemn"..i] = false -- Override
		   end
		
   	HazMenu:addSubMenu("Harass", "Harass")
		HazMenu.Harass:addParam("harassQ", "Use Q", SCRIPT_PARAM_ONOFF, true)				
	    HazMenu.Harass:addParam("harassE", "Use E", SCRIPT_PARAM_ONOFF, true)
		HazMenu.Harass:addParam("Mana", "Mana Manager %", SCRIPT_PARAM_SLICE, 50, 1, 100, 0)			    
	
    HazMenu:addSubMenu("Farm", "Farm")
	    HazMenu.Farm:addParam("farmQ", "Use Q", SCRIPT_PARAM_ONOFF, true)		
	    HazMenu.Farm:addParam("Mana", "Mana Manager %", SCRIPT_PARAM_SLICE, 50, 1, 100, 0)
	
	HazMenu:addSubMenu("Misc", "Misc")
		HazMenu.Misc:addParam("KS", "KillSteal with E", SCRIPT_PARAM_ONOFF, false)		
		HazMenu.Misc:addParam("Ignite", "Use Auto Ignite", SCRIPT_PARAM_ONOFF, true)	    
		HazMenu.Misc:addParam("Bork", "Use Botrk max Heal", SCRIPT_PARAM_ONOFF, true)
		HazMenu.Misc:addParam("Bilge", "Use Bilgewater", SCRIPT_PARAM_ONOFF, true)
		
	HazMenu:addSubMenu("Draw","Draw")
	  HazMenu.Draw:addParam("drawq", "Draw Q", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addParam("draww", "Draw W", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addParam("drawe", "Draw E", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addParam("drawr", "Draw R", SCRIPT_PARAM_ONOFF, true)	  
	  HazMenu.Draw:addParam("drawt", "Draw Circle on Target", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addSubMenu("TowerR","TowerR")
	    HazMenu.Draw.TowerR:addParam("TurretRanges", "Show Turret Ranges", SCRIPT_PARAM_ONOFF, true)
	    HazMenu.Draw.TowerR:addParam("onlyClose", "Show only close", SCRIPT_PARAM_ONOFF, true)
        HazMenu.Draw.TowerR:addParam("showAlly", "Show ally turrets", SCRIPT_PARAM_ONOFF, false)
        HazMenu.Draw.TowerR:addParam("showVisibility", "Show turret view", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addSubMenu ("awarness","awarness")
	    HazMenu.Draw.awarness:addParam("Gank", "Circle alert on ganker ", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addSubMenu("Wards","Wards")
	    HazMenu.Draw.Wards:addParam("ON", "Use Ward timers", SCRIPT_PARAM_ONOFF, true)
	    HazMenu.Draw.Wards:addParam("OwnTeam", "show my own team wards", SCRIPT_PARAM_ONOFF, false)
        HazMenu.Draw.Wards:addParam("ShowPinks", "show pink wards", SCRIPT_PARAM_ONOFF, true)
        HazMenu.Draw.Wards:addParam("ShowTraps", "show traps", SCRIPT_PARAM_ONOFF, true)
        HazMenu.Draw.Wards:addParam("PingWards", "ping wards near you", SCRIPT_PARAM_ONOFF, false)
        HazMenu.Draw.Wards:addParam("Manual", "manual ward editing (put/delete)", SCRIPT_PARAM_ONOFF, false)
        HazMenu.Draw.Wards:addParam("DeleteWard", "delete ward", SCRIPT_PARAM_ONKEYDOWN, false, 0)
        HazMenu.Draw.Wards:addParam("PutWard1", "put 1 minute ward", SCRIPT_PARAM_ONKEYDOWN, false, 0)
        HazMenu.Draw.Wards:addParam("PutWard2", "put 2 minute ward", SCRIPT_PARAM_ONKEYDOWN, false, 0)
        HazMenu.Draw.Wards:addParam("PutWard3", "put 3 minute ward", SCRIPT_PARAM_ONKEYDOWN, false, 0)
	  
	HazMenu:addSubMenu("CoolDowns", "CoolDowns")
	    HazMenu.CoolDowns:addParam("ON", "Use CD Tracker",  SCRIPT_PARAM_ONOFF, true)
	    HazMenu.CoolDowns:addParam("Enabled", "Draw indicators in enemies", SCRIPT_PARAM_ONOFF, true)
	    HazMenu.CoolDowns:addParam("Enabled2", "Draw indicators in allies", SCRIPT_PARAM_ONOFF, false)
		
		HazMenu.CoolDowns:addSubMenu("Drawing", "Drawing")
		  HazMenu.CoolDowns.Drawing:addParam("Always", "Always draw the indicators",  SCRIPT_PARAM_ONOFF, true)
	      HazMenu.CoolDowns.Drawing:addParam("DrawKey", "Only draw while holding", SCRIPT_PARAM_ONKEYDOWN, false, 16)
		
		HazMenu.CoolDowns:addSubMenu("Appearance ", "Appearance")
		  HazMenu.CoolDowns.Appearance:addParam("showh", "Show horizontal indicators", SCRIPT_PARAM_ONOFF, true)
	      HazMenu.CoolDowns.Appearance:addParam("vposition", "Horizontal indicators vertical position", SCRIPT_PARAM_SLICE, 0, -25, 25)
	      HazMenu.CoolDowns.Appearance:addParam("width", "Horizontal indicators width", SCRIPT_PARAM_SLICE, 20, 1, 25)
	      HazMenu.CoolDowns.Appearance:addParam("height", "Horizontal indicators height", SCRIPT_PARAM_SLICE, 5, 1, 20)
	      HazMenu.CoolDowns.Appearance:addParam("n", "Number of horizontal indicators", SCRIPT_PARAM_SLICE, 4, 1, 6)
	      HazMenu.CoolDowns.Appearance:addParam("showv", "Show vertical indicators", SCRIPT_PARAM_ONOFF, true)
	      HazMenu.CoolDowns.Appearance:addParam("width2", "Vertical indicators width", SCRIPT_PARAM_SLICE, 9, 1, 25)
	      HazMenu.CoolDowns.Appearance:addParam("textsize", "Text size", SCRIPT_PARAM_SLICE, 13, 10, 20)
		
		HazMenu.CoolDowns:addSubMenu("Colors", "Colors")
		  HazMenu.CoolDowns.Colors:addParam("cdcolor", "Cooldown color", SCRIPT_PARAM_COLOR, {255, 214, 114, 0})--orange
	      HazMenu.CoolDowns.Colors:addParam("readycolor", "Ready color", SCRIPT_PARAM_COLOR, {255, 54, 214, 0})--green
	      HazMenu.CoolDowns.Colors:addParam("textcolor", "Text color", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})--white
	      HazMenu.CoolDowns.Colors:addParam("backgroundcolor", "Background color", SCRIPT_PARAM_COLOR, {255, 128, 128, 128})--grey
	   
   	    HazMenu.CoolDowns.Colors:addSubMenu("Summoner Spells", "SSpells")
		  for i, spell in ipairs(SSpells) do
		  HazMenu.CoolDowns.Colors.SSpells:addParam(spell.Name, spell.CName, SCRIPT_PARAM_COLOR, spell.Color)
	      end
		
	
	HazMenu:addParam("AGP", "Auto E gapclosers", SCRIPT_PARAM_ONOFF, true)	
	HazMenu:addParam("Interrupt", "interrupt with E", SCRIPT_PARAM_ONOFF, true)
	
	
	HazMenu:addSubMenu("LagFreeCircles", "LFC")
	  HazMenu.LFC:addParam("LagFree", "Activate Lag Free Circles", SCRIPT_PARAM_ONOFF, false)
	  HazMenu.LFC:addParam("CL", "Length before Snapping", SCRIPT_PARAM_SLICE, 350, 75, 2000, 0)
	  HazMenu.LFC:addParam("CLinfo", "Higher length = Lower FPS Drops", SCRIPT_PARAM_INFO, "")
	
	for i = 1, heroManager.iCount, 1 do
		local enemy = heroManager:getHero(i)
		if enemy.team ~= myHero.team then
			for _, champ in pairs(InterruptList) do
				if enemy.charName == champ.charName then
					table.insert(ToInterrupt, champ.spellName)
				end
			end
		end
	end
	
	if _G.Reborn_Loaded then
	DelayAction(function()
		PrintChat("<font color = \"#FFFFFF\">[Vayne] </font><font color = \"#FF0000\">SAC Status:</font> <font color = \"#FFFFFF\">Successfully integrated.</font> </font>")
		HazMenu:addParam("SACON","[Vayne] SAC:R support is active.", 5, "")
		isSAC = true
	end, 10)
	elseif not _G.Reborn_Loaded then
		PrintChat("<font color = \"#FFFFFF\">[Vayne] </font><font color = \"#FF0000\">Orbwalker not found:</font> <font color = \"#FFFFFF\">SxOrbWalk integrated.</font> </font>")
		HazMenu:addSubMenu("Orbwalker", "SxOrb")
		SxOrb:LoadToMenu(HazMenu.SxOrb)
		isSX = true
	end
	HazMenu:permaShow("combokey")
	HazMenu:permaShow("harasskey")
	HazMenu:permaShow("farmkey")
	HazMenu.Condemn:permaShow("autoCondemn")
end



function KS(enemy)  	
    if E.IsReady() and getDmg("E", enemy, myHero) > enemy.health then
		if GetDistance(enemy, myHero) <= E.range and HazMenu.Misc.KS then 			
				CastSpell(_E, enemy)
		    
		end
	end
	
end


function AutoIgnite(enemy)
  	iDmg = ((IREADY and getDmg("IGNITE", enemy, myHero)) or 0)
	siDmg = (iDmg + 70)
	if enemy.health <= siDmg and GetDistance(enemy) <= 600 and ignite ~= nil
		then
			if IREADY then CastSpell(ignite, enemy) end
	end
end


--Big TNX to Manciuzz for this part


function OnProcessSpell(unit, spell) 
    	
	if HazMenu.Interrupt and E.IsReady() and #ToInterrupt > 0 then
		for _, ability in pairs(ToInterrupt) do
			if spell.name == ability and unit.team ~= myHero.team then
				if GetDistance(unit) <= 450 then CastSpell(_E, unit) end
			end
		end
	end
	if HazMenu.AGP and E.IsReady() then
	        local jarvanAddition = unit.charName == "JarvanIV" and unit:CanUseSpell(_Q) ~= READY and _R or _Q
			local isAGapcloserUnit = {
				['Aatrox']      = {true, spell = _Q,                  range = 1000,  projSpeed = 1200, },
				['Akali']       = {true, spell = _R,                  range = 800,   projSpeed = 2200, }, 
				['Alistar']     = {true, spell = _W,                  range = 650,   projSpeed = 2000, }, 
				['Diana']       = {true, spell = _R,                  range = 825,   projSpeed = 2000, }, 
				['Gragas']      = {true, spell = _E,                  range = 600,   projSpeed = 2000, },
				['Hecarim']     = {true, spell = _R,                  range = 1000,  projSpeed = 1200, },
				['Irelia']      = {true, spell = _Q,                  range = 650,   projSpeed = 2200, }, 
				['JarvanIV']    = {true, spell = jarvanAddition,      range = 770,   projSpeed = 2000, }, 
				['Jax']         = {true, spell = _Q,                  range = 700,   projSpeed = 2000, }, 
				['Jayce']       = {true, spell = 'JayceToTheSkies',   range = 600,   projSpeed = 2000, }, 
				['Khazix']      = {true, spell = _E,                  range = 900,   projSpeed = 2000, },
				['Leblanc']     = {true, spell = _W,                  range = 600,   projSpeed = 2000, },
				['LeeSin']      = {true, spell = 'blindmonkqtwo',     range = 1300,  projSpeed = 1800, },
				['Leona']       = {true, spell = _E,                  range = 900,   projSpeed = 2000, },
				['Malphite']    = {true, spell = _R,                  range = 1000,  projSpeed = 1500 + unit.ms},
				['Maokai']      = {true, spell = _Q,                  range = 600,   projSpeed = 1200, }, 
				['MonkeyKing']  = {true, spell = _E,                  range = 650,   projSpeed = 2200, }, 
				['Pantheon']    = {true, spell = _W,                  range = 600,   projSpeed = 2000, }, 
				['Poppy']       = {true, spell = _E,                  range = 525,   projSpeed = 2000, }, 
				['Renekton']    = {true, spell = _E,                  range = 450,   projSpeed = 2000, },
				['Sejuani']     = {true, spell = _Q,                  range = 650,   projSpeed = 2000, },
				['Shen']        = {true, spell = _E,                  range = 575,   projSpeed = 2000, },
				['Tristana']    = {true, spell = _W,                  range = 900,   projSpeed = 2000, },
				['Tryndamere']  = {true, spell = 'Slash',             range = 650,   projSpeed = 1450, },
				['XinZhao']     = {true, spell = _E,                  range = 650,   projSpeed = 2000, }, 
			}
			if unit.type == myHero.type and unit.team ~= myHero.team and isAGapcloserUnit[unit.charName] and GetDistance(unit) < 2000 and spell ~= nil then
				if spell.name == (type(isAGapcloserUnit[unit.charName].spell) == 'number' and unit:GetSpellData(isAGapcloserUnit[unit.charName].spell).name or isAGapcloserUnit[unit.charName].spell) then
					if spell.target ~= nil and spell.target.isMe or isAGapcloserUnit[unit.charName].spell == 'blindmonkqtwo' then
						if E.IsReady() then
							E.target = unit
							CastSpell(_E, unit)
						end
					else
						spellExpired = false
						informationTable = {
							spellSource = unit,
							spellCastedTick = GetTickCount(),
							spellStartPos = Point(spell.startPos.x, spell.startPos.z),
							spellEndPos = Point(spell.endPos.x, spell.endPos.z),
							spellRange = isAGapcloserUnit[unit.charName].range,
							spellSpeed = isAGapcloserUnit[unit.charName].projSpeed
						}
					end
				end
			end
		
    end
    if unit.type == "obj_AI_Hero" then
		for _,type in ipairs(types) do
			if type.spellName == spell.name then

        local wardPos = GetLandingPos(spell.endPos)

        if FindObjAt(wardPos.x, wardPos.y, wardPos.z) == nil then
  				placedWards["spell:" .. GetTickCount()] = { x = wardPos.x, y = wardPos.y, z = wardPos.z, visionRange = type.sightRange, color = type.color, triggerRange = type.triggerRange,
                                                                              spawnTime = GetTickCount(), duration = type.duration, creator = unit, team = unit.team, trap = type.trap }
        end
			end

		end

    end
	
	
	 if unit.isMe and spell.name:lower():find("attack") and HazMenu.combokey and HazMenu.Combo.comboQ and Q.IsReady() then
        SpellTarget = spell.target
        if SpellTarget.type == myHero.type then
            DelayAction(function() CastSpell(_Q, mousePos.x, mousePos.z) end, spell.windUpTime - GetLatency() / 2000)
        end
    end
    if HazMenu.farmkey and Q.IsReady() then
	    Minions:update()
		    for i, Minion in pairs(Minions.objects) do
			     
                     if unit.isMe and spell.name:lower():find("attack") and HazMenu.farmkey and HazMenu.Farm.farmQ and myHero.mana / myHero.maxMana > HazMenu.Farm.Mana /100 then
                        SpellTarget = spell.target
                       DelayAction(function() CastSpell(_Q, mousePos.x, mousePos.z) end, spell.windUpTime - GetLatency() / 2000)
                      end
					  
			end	
        JungleMinions:update()
            for i, Minion in pairs(JungleMinions.objects) do
                if unit.isMe and spell.name:lower():find("attack") and HazMenu.farmkey and HazMenu.Farm.farmQ and myHero.mana / myHero.maxMana > HazMenu.Farm.Mana /100 then
                        SpellTarget = spell.target
                       DelayAction(function() CastSpell(_Q, mousePos.x, mousePos.z) end, spell.windUpTime - GetLatency() / 2000)
                end
			end
	end
	
	if Q.IsReady() and HazMenu.harasskey then
	    if unit.isMe and spell.name:lower():find("attack") and HazMenu.Harass.harassQ and myHero.mana / myHero.maxMana > HazMenu.Harass.Mana /100 then
           SpellTarget = spell.target
            DelayAction(function() CastSpell(_Q, mousePos.x, mousePos.z) end, spell.windUpTime - GetLatency() / 2000)			
        end	   
	end
	
	if HazMenu.harasskey and HazMenu.Harass.harassE and E.IsReady() then
	 if unit.isMe and spell.name == "VayneTumble" and myHero.mana / myHero.maxMana > HazMenu.Harass.Mana /100 then 		
	      DelayAction(function() CastSpell(_E, target) end, 0.5)	
	    end
	end
end			



function SpellExpired()
	if ValidTarget(target) then
	if HazMenu.AGP and not spellExpired and (GetTickCount() - informationTable.spellCastedTick) <= (informationTable.spellRange / informationTable.spellSpeed) * 1000 then
		local spellDirection     = (informationTable.spellEndPos - informationTable.spellStartPos):normalized()
		local spellStartPosition = informationTable.spellStartPos + spellDirection
		local spellEndPosition   = informationTable.spellStartPos + spellDirection * informationTable.spellRange
		local heroPosition = Point(myHero.x, myHero.z)
		local lineSegment = LineSegment(Point(spellStartPosition.x, spellStartPosition.y), Point(spellEndPosition.x, spellEndPosition.y))
	
			local lineSegment = LineSegment(Point(spellStartPosition.x, spellStartPosition.y), Point(spellEndPosition.x, spellEndPosition.y))
			
        
			if lineSegment:distance(heroPosition) <= 400 and E.IsReady() then
				
				CastSpell(_E, target)
			end

		else
			spellExpired = true
			informationTable = {}
		end
     end   
               
               
    
end



function LFCfunc()
	if not HazMenu.LFC.LagFree then _G.DrawCircle = _G.oldDrawCircle end
    if HazMenu.LFC.LagFree then _G.DrawCircle = DrawCircle2 end
end

-- Barasia, vadash, viseversa

function DrawCircleNextLvl(x, y, z, radius, width, color, chordlength)
	radius = radius or 300
	quality = math.max(8,round(180/math.deg((math.asin((chordlength/(2*radius)))))))
	quality = 2 * math.pi / quality
	radius = radius*.92
	local points = {}
	for theta = 0, 2 * math.pi + quality, quality do
		local c = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta)))
		points[#points + 1] = D3DXVECTOR2(c.x, c.y)
	end
	DrawLines2(points, width or 1, color or 4294967295)
end

function round(num) 
	if num >= 0 then return math.floor(num+.5) else return math.ceil(num-.5) end
end

function DrawCircle2(x, y, z, radius, color)
	local vPos1 = Vector(x, y, z)
	local vPos2 = Vector(cameraPos.x, cameraPos.y, cameraPos.z)
	local tPos = vPos1 - (vPos1 - vPos2):normalized() * radius
	local sPos = WorldToScreen(D3DXVECTOR3(tPos.x, tPos.y, tPos.z))
	if OnScreen({ x = sPos.x, y = sPos.y }, { x = sPos.x, y = sPos.y }) then
		DrawCircleNextLvl(x, y, z, radius, 1, color, HazMenu.LFC.CL) 
	end
end




------------------------------------------------------Items--------------------------------------------------


function GetSlotItem(id, unit)
	
	unit 		= unit or myHero

	if (not ItemNames[id]) then
		return ___GetInventorySlotItem(id, unit)
	end

	local name	= ItemNames[id]
	
	for slot = ITEM_1, ITEM_7 do
		local item = unit:GetSpellData(slot).name
		if ((#item > 0) and (item:lower() == name:lower())) then
			return slot
		end
	end

end



function Bork()
    if ValidTarget(target) then
	local Slot = GetInventorySlotItem(3153)
		if Slot ~= nil and myHero:CanUseSpell(Slot) == READY then
			local Range = 630
			
			local health = myHero.health
			local maxHealth = myHero.maxHealth
				if ((maxHealth)*0.7) >= health then
			CastSpell(Slot, target)
		end
	end
	end
end


function Bilge()
    if ValidTarget(target) then
	local Slot = GetInventorySlotItem(3144)
		if Slot ~= nil and myHero:CanUseSpell(Slot) == READY then
			local Range = 630
			
			local health = myHero.health
			local maxHealth = myHero.maxHealth
				if ((maxHealth)*0.7) >= health then
			CastSpell(Slot, target)
		end
	end
	end
end

function CountEnemyHeroInRange(range)
	local enemyInRange = 0
		for i = 1, heroManager.iCount, 1 do
			local hero = heroManager:getHero(i)
				if ValidTarget(hero,range) then
			enemyInRange = enemyInRange + 1
			end
		end
	return enemyInRange
end



function castR()
        local Amount = HazMenu.Combo.minR
		local Range = 1100
	    if R.IsReady() and HazMenu.Combo.comboR then
		    if CountEnemyHeroInRange(Range) >= Amount then			     
			 CastSpell(_R)		       
		    end	
	    end
end

------------------------------------------------------------------------------------------------
function condemn()
     if myHero.dead then return end
 
    if IsKeyDown(AllClassMenu) then
        HazMenu.Condemn._param[1].pType = VayneAssistant.switchKey and 2 or 3
        HazMenu.Condemn._param[1].text  = VayneAssistant.switchKey and "Auto-Condemn OnHold:" or "Auto-Condemn Toggle:"
        if HazMenu.Condemn.switchKey and HazMenu.Condemn.autoCondemn then
            HazMenu.Condemn.autoCondemn = false
        end
 
        HazMenu.Condemn.settingsSubMenu._param[5].text  = HazMenu.Condemn.settingsSubMenu.shootingMode and VIP_USER and "Currently: Using Predictions" or "Currently: No prediction"
        if not VIP_USER then HazMenu.Condemn.settingsSubMenu.shootingMode = "NOT VIP" end
    end
 
    if E.IsReady() then
        if HazMenu.Condemn.settingsSubMenu.PushAwayGapclosers then
            if not spellExpired and (GetTickCount() - informationTable.spellCastedTick) <= (informationTable.spellRange/informationTable.spellSpeed)*1000 then
                local spellDirection     = (informationTable.spellEndPos - informationTable.spellStartPos):normalized()
                local spellStartPosition = informationTable.spellStartPos + spellDirection
                local spellEndPosition   = informationTable.spellStartPos + spellDirection * informationTable.spellRange
                local heroPosition = Point(myHero.x, myHero.z)
 
                local lineSegment = LineSegment(Point(spellStartPosition.x, spellStartPosition.y), Point(spellEndPosition.x, spellEndPosition.y))
                --lineSegment:draw(ARGB(255, 0, 255, 0), 70)
 
                if lineSegment:distance(heroPosition) <= (not informationTable.spellIsAnExpetion and 65 or 200) then
                    CastSpell(_E, informationTable.spellSource)
                end
            else
                spellExpired = true
                informationTable = {}
            end
        end
 
        if HazMenu.Condemn.autoCondemn then
            for i, enemyHero in ipairs(enemyTable) do
                if not HazMenu.Condemn.condemnSubMenu["disableCondemn"..i] then
                    if enemyHero ~= nil and enemyHero.valid and not enemyHero.dead and enemyHero.visible and GetDistance(enemyHero) <= 715 and GetDistance(enemyHero) > 0 then
                        local enemyPosition = HazMenu.Condemn.settingsSubMenu.shootingMode and VIP_USER and tp:GetPrediction(enemyHero) or enemyHero
                        local PushPos = enemyPosition + (Vector(enemyPosition) - myHero):normalized()*HazMenu.Condemn.settingsSubMenu.pushDistance
 
                        if enemyHero.x > 0 and enemyHero.z > 0 then
                            local checks = math.ceil((HazMenu.Condemn.settingsSubMenu.pushDistance)/65)
                            local checkDistance = (HazMenu.Condemn.settingsSubMenu.pushDistance)/checks
                            local InsideTheWall = false
                            for k=1, checks, 1 do
                                local checksPos = enemyPosition + (Vector(enemyPosition) - myHero):normalized()*(checkDistance*k)
                                local WallContainsPosition = IsWall(D3DXVECTOR3(checksPos.x, checksPos.y, checksPos.z))
                                if WallContainsPosition then
                                    InsideTheWall = true
                                    break
                                end
                            end
 
                            if InsideTheWall then CastSpell(_E, enemyHero) end
                            
 
 
                        end
                    end
                end
            end
        end
    end
end


-------------------Set Priority----------------------------------------------------------------------------

function SetPriority(table, hero, priority)
	for i=1, #table, 1 do
		if hero.charName:find(table[i]) ~= nil then
			TS_SetHeroPriority(priority, hero.charName)
		end
	end
end
 
function arrangePrioritys()
		for i, enemy in ipairs(GetEnemyHeroes()) do
		SetPriority(priorityTable.AD_Carry, enemy, 1)
		SetPriority(priorityTable.AP,	   enemy, 2)
		SetPriority(priorityTable.Support,  enemy, 3)
		SetPriority(priorityTable.Bruiser,  enemy, 4)
		SetPriority(priorityTable.Tank,	 enemy, 5)
		end
end

function arrangePrioritysTT()
        for i, enemy in ipairs(GetEnemyHeroes()) do
		SetPriority(priorityTable.AD_Carry, enemy, 1)
		SetPriority(priorityTable.AP,       enemy, 1)
		SetPriority(priorityTable.Support,  enemy, 2)
		SetPriority(priorityTable.Bruiser,  enemy, 2)
		SetPriority(priorityTable.Tank,     enemy, 3)
        end
end



function PriorityOnLoad()
	if heroManager.iCount < 10 or (TwistedTreeline and heroManager.iCount < 6) then
		print("<b><font color=\"#6699FF\">Clarity Ahri:</font></b> <font color=\"#FFFFFF\">Too few champions to arrange priority.</font>")
	elseif heroManager.iCount == 6 then
		arrangePrioritysTT()
    else
		arrangePrioritys()
	end
end


--------------------------------------target--------------------------------------------------------------

function OnWndMsg(Msg, Key)
	if Msg == WM_LBUTTONDOWN and HazMenu.Combo.focus then
		local dist = 0
		local Selecttarget = nil
		for i, enemy in ipairs(GetEnemyHeroes()) do
			if ValidTarget(enemy) then
				if GetDistance(enemy, mousePos) <= dist or Selecttarget == nil then
					dist = GetDistance(enemy, mousePos)
					Selecttarget = enemy
				end
			end
		end
		if Selecttarget and dist < 300 then
			if SelectedTarget and Selecttarget.charName == SelectedTarget.charName then
				SelectedTarget = nil
				if HazMenu.Combo.focus then 
					PrintChat("Target deselected: "..Selecttarget.charName) 
				end
			else
				SelectedTarget = Selecttarget
				if HazMenu.Combo.focus then
					PrintChat("New target selected: "..Selecttarget.charName) 
				end
			end
		end
	end
end

----------------------------------------------------------------------------------------------------------

function GetHPBarPos(enemy)
	enemy.barData = {PercentageOffset = {x = -0.05, y = 0}}--GetEnemyBarData()
	local barPos = GetUnitHPBarPos(enemy)
	local barPosOffset = GetUnitHPBarOffset(enemy)
	local barOffset = { x = enemy.barData.PercentageOffset.x, y = enemy.barData.PercentageOffset.y }
	local barPosPercentageOffset = { x = enemy.barData.PercentageOffset.x, y = enemy.barData.PercentageOffset.y }
	local BarPosOffsetX = 171
	local BarPosOffsetY = 46
	local CorrectionY = 39
	local StartHpPos = 31
	
	barPos.x = math.floor(barPos.x + (barPosOffset.x - 0.5 + barPosPercentageOffset.x) * BarPosOffsetX + StartHpPos)
	barPos.y = math.floor(barPos.y + (barPosOffset.y - 0.5 + barPosPercentageOffset.y) * BarPosOffsetY + CorrectionY)
						
	local StartPos = Vector(barPos.x , barPos.y, 0)
	local EndPos =  Vector(barPos.x + 108 , barPos.y , 0)
	return Vector(StartPos.x, StartPos.y, 0), Vector(EndPos.x, EndPos.y, 0)
end

function tracker()
	if os.clock() - TickLimit > 0.3 then
		TickLimit = os.clock()
		for i=1, heroManager.iCount, 1 do
			local hero = heroManager:getHero(i)
			if ValidTarget(hero, math.huge, false) or ValidTarget(hero) then
				--[[	Update the current cooldowns]]
				hero = heroManager:getHero(i)
				for _, spell in pairs(TrackSpells) do
					if SpellsData[i] == nil then
						SpellsData[i] = {}
					end
					if SpellsData[i][spell] == nil then
						SpellsData[i][spell] = {currentCd=0, maxCd = 0, level=0}
					end
					--[[	Get the maximum cooldowns to make the progress  bar]]
					local thespell = hero:GetSpellData(spell)
					local currentcd
					if thespell and thespell.currentCd then
						currentcd = thespell.currentCd
					end
					if currentcd and thespell and thespell.currentCd then
						SpellsData[i][spell] = {
							currentCd = math.floor(currentcd),
							maxCd = math.floor(currentcd) > SpellsData[i][spell].maxCd and math.floor(currentcd) or SpellsData[i][spell].maxCd,
							level = thespell.level
						}
					end
				end
			end
		end
	end
	FirstTick = true
end

function DrawRectangleAL(x, y, w, h, color)
	local Points = {}
	Points[1] = D3DXVECTOR2(math.floor(x), math.floor(y))
	Points[2] = D3DXVECTOR2(math.floor(x + w), math.floor(y))
	DrawLines2(Points, math.floor(h), color)
end



function CDDraws()
   if (HazMenu.CoolDowns.Enabled or HazMenu.CoolDowns.Enabled2 or IsKeyDown(16)) and FirstTick and (HazMenu.CoolDowns.Drawing.Always or HazMenu.CoolDowns.Drawing.DrawKey) then
		for i=1, heroManager.iCount, 1 do
			local hero = heroManager:getHero(i)
			if ((ValidTarget(hero, math.huge,false)  and (HazMenu.CoolDowns.Enabled2 or IsKeyDown(16))) or (ValidTarget(hero) and (HazMenu.CoolDowns.Enabled or IsKeyDown(16)))) and not hero.isMe then
				local barpos = GetHPBarPos(hero)
				if OnScreen(barpos.x, barpos.y) and (SpellsData[i] ~= nil) then
					local pos = Vector(barpos.x, barpos.y, 0)
					local CDcolor = ARGB(HazMenu.CoolDowns.Colors.cdcolor[1], HazMenu.CoolDowns.Colors.cdcolor[2],HazMenu.CoolDowns.Colors.cdcolor[3],HazMenu.CoolDowns.Colors.cdcolor[4])
					local Readycolor = ARGB(HazMenu.CoolDowns.Colors.readycolor[1],HazMenu.CoolDowns.Colors.readycolor[2],HazMenu.CoolDowns.Colors.readycolor[3],HazMenu.CoolDowns.Colors.readycolor[4])
					local Textcolor = ARGB(HazMenu.CoolDowns.Colors.textcolor[1],HazMenu.CoolDowns.Colors.textcolor[2],HazMenu.CoolDowns.Colors.textcolor[3],HazMenu.CoolDowns.Colors.textcolor[4] )
					local Backgroundcolor = ARGB(HazMenu.CoolDowns.Colors.backgroundcolor[1],HazMenu.CoolDowns.Colors.backgroundcolor[2],HazMenu.CoolDowns.Colors.backgroundcolor[3],HazMenu.CoolDowns.Colors.backgroundcolor[4])
					local width = HazMenu.CoolDowns.Appearance.width
					local height = HazMenu.CoolDowns.Appearance.height
					local sep = 2
					--[[First 4 spells]]
					if HazMenu.CoolDowns.Appearance.showh then
						pos.y =  pos.y + HazMenu.CoolDowns.Appearance.vposition
						for j, Spells in ipairs (TrackSpells) do
							local currentcd = SpellsData[i][Spells].currentCd
							local maxcd = SpellsData[i][Spells].maxCd
							local level = SpellsData[i][Spells].level
							
							if j > 4 then
								CDcolor = ARGB(HazMenu.CoolDowns.Colors.SSpells["TheRest"][1], HazMenu.CoolDowns.Colors.SSpells["TheRest"][2], HazMenu.CoolDowns.Colors.SSpells["TheRest"][3], HazMenu.CoolDowns.Colors.SSpells["TheRest"][4])
								for _, spell in ipairs(SSpells) do
									if (HazMenu.CoolDowns.Colors.SSpells[spell.Name] ~= nil) and (hero:GetSpellData(j == 5 and SUMMONER_1 or SUMMONER_2).name == spell.Name) then
										CDcolor = ARGB(HazMenu.CoolDowns.Colors.SSpells[spell.Name][1], HazMenu.CoolDowns.Colors.SSpells[spell.Name][2], HazMenu.CoolDowns.Colors.SSpells[spell.Name][3], HazMenu.CoolDowns.Colors.SSpells[spell.Name][4])
									end
								end
								Readycolor = CDcolor
							else
								CDcolor = ARGB(HazMenu.CoolDowns.Colors.cdcolor[1], HazMenu.CoolDowns.Colors.cdcolor[2],HazMenu.CoolDowns.Colors.cdcolor[3],HazMenu.CoolDowns.Colors.cdcolor[4])
								Readycolor = ARGB(HazMenu.CoolDowns.Colors.readycolor[1],HazMenu.CoolDowns.Colors.readycolor[2],HazMenu.CoolDowns.Colors.readycolor[3],HazMenu.CoolDowns.Colors.readycolor[4])
							end
						
							DrawRectangleAL(pos.x-1, pos.y-1, width + sep , height+4, Backgroundcolor)
						
							if (currentcd ~= 0) then
								DrawRectangleAL(pos.x, pos.y, width - math.floor(width * currentcd) / maxcd, height, CDcolor)
							else
								DrawRectangleAL(pos.x, pos.y, width, height, Readycolor)
							end
						
							if (currentcd ~= 0) and (currentcd < 100) then
								DrawText(tostring(currentcd),HazMenu.CoolDowns.Appearance.textsize, pos.x+6, pos.y+4, ARGB(255, 0, 0, 0))
								DrawText(tostring(currentcd),HazMenu.CoolDowns.Appearance.textsize, pos.x+8, pos.y+6, ARGB(255, 0, 0, 0))
								DrawText(tostring(currentcd),HazMenu.CoolDowns.Appearance.textsize, pos.x+7, pos.y+5, Textcolor)
							elseif IsKeyDown(16) then
								DrawText(tostring(level),HazMenu.CoolDowns.Appearance.textsize, pos.x+6, pos.y+4, ARGB(255, 0, 0, 0))
								DrawText(tostring(level),HazMenu.CoolDowns.Appearance.textsize, pos.x+8, pos.y+6, ARGB(255, 0, 0, 0))
								DrawText(tostring(level),HazMenu.CoolDowns.Appearance.textsize, pos.x+7, pos.y+5, Textcolor)
							end

							pos.x = pos.x + width + sep
							if j == HazMenu.CoolDowns.Appearance.n then break end
						end
					end
					pos.x = barpos.x + 25*5+3 + 2*4
					pos.y = barpos.y - 8
					--[[Last 2 spells]]
					if HazMenu.CoolDowns.Appearance.showv then
						for j, Spells in ipairs (TrackSpells) do
							local currentcd = SpellsData[i][Spells].currentCd
							local maxcd = SpellsData[i][Spells].maxCd
							local width2 = HazMenu.CoolDowns.Appearance.width2
							if j > 4 then
								CDcolor = ARGB(HazMenu.CoolDowns.Colors.SSpells["TheRest"][1], HazMenu.CoolDowns.Colors.SSpells["TheRest"][2], HazMenu.CoolDowns.Colors.SSpells["TheRest"][3], HazMenu.CoolDowns.Colors.SSpells["TheRest"][4])
								for _, spell in ipairs(SSpells) do
									if (HazMenu.CoolDowns.Colors.SSpells[spell.Name] ~= nil) and (hero:GetSpellData(j == 5 and SUMMONER_1 or SUMMONER_2).name == spell.Name) then
										CDcolor = ARGB(HazMenu.CoolDowns.Colors.SSpells[spell.Name][1], HazMenu.CoolDowns.Colors.SSpells[spell.Name][2], HazMenu.CoolDowns.Colors.SSpells[spell.Name][3], HazMenu.CoolDowns.Colors.SSpells[spell.Name][4])
									end
								end
								DrawRectangleAL(pos.x, pos.y,width2+2,11,Backgroundcolor)
								if currentcd ~= 0 then
									DrawRectangleAL(pos.x+1, pos.y+1, width2 - width2 * currentcd / maxcd,9,CDcolor)
								
								else
									DrawRectangleAL(pos.x+1, pos.y+1, width2, 9, CDcolor)
								end
								if (currentcd ~= 0) and (currentcd < 100) then
									DrawText(tostring(currentcd),HazMenu.CoolDowns.Appearance.textsize, pos.x-1, pos.y-1, ARGB(255, 0, 0, 0))
									DrawText(tostring(currentcd),HazMenu.CoolDowns.Appearance.textsize, pos.x+1, pos.y+1, ARGB(255, 0, 0, 0))
									DrawText(tostring(currentcd),HazMenu.CoolDowns.Appearance.textsize, pos.x, pos.y, Textcolor)
								end
								Readycolor = CDcolor
								pos.y = pos.y - 12
							end
						end
					end
				end
			end
		end
	end
end

---------------------------------------------LowAwarness-----------------------------------------------------------------------


function turrets()
 if GetGame().isOver then return end
        for i, turret in pairs(drawTurrets) do
            DrawCircle(turret.x, turret.y, turret.z, turret.range, turret.color)
            if HazMenu.Draw.TowerR.showVisibility then
                DrawCircle(turret.x, turret.y, turret.z, turret.visibilityRange, visibilityTurretColor)
            end
        end
end

function turretranges()
       drawTurrets = {}
        for name, turret in pairs(GetTurrets()) do
                if turret ~= nil then
                        local enemyTurret = turret.team ~= player.team
                        if (HazMenu.Draw.TowerR.showAlly or enemyTurret)
                                and (HazMenu.Draw.TowerR.onlyClose == false or GetDistance(turret) < 2000) then
                                        table.insert(drawTurrets, {x = turret.x, y = turret.y, z = turret.z, range = turret.range, color = (enemyTurret and enemyTurretColor or allyTurretColor), visibilityRange = turret.visibilityRange})
                        end
                end
        end
end

		
		
function awarness()
    if HazMenu.Draw.awarness.Gank then
        for i, Enemy in pairs(EnemyTable) do
            if not Drawed[i] and os.clock() > TimeMissing[i]
                        and os.clock() < SurprizeTime[i] and not EnemyDead[i]
                        and EnemyVisible[i] and DistanceToEnemy[i] < 2500 then
                LastDraw[i] = os.clock() + 5
                Drawed[i] = true
            end
            if Drawed[i] and os.clock() > TimeMissing[i]
                        and os.clock() < SurprizeTime[i] and not EnemyDead[i]
                        and EnemyVisible[i] and DistanceToEnemy[i] < 2500 then
                if os.clock() < LastDraw[i] then
                    DrawCircle(Enemy.x, Enemy.y, Enemy.z, 1500, 0xDC143C)
                end
            end
        end
    end
end

function gankalerter()
     if HazMenu.Draw.awarness.Gank then
        for i, Enemy in pairs(EnemyTable) do
            EnemyDead[i] = Enemy.dead
            EnemyVisible[i] = Enemy.visible
            if EnemyVisible[i] then
                if not Appeared[i] then
                    SurprizeTime[i] = os.clock() + 6
                    Appeared[i] = true
                end
                Dissapeared[i] = false
                DistanceToEnemy[i] = myHero:GetDistance(Enemy)
            end
            if EnemyVisible[i] == false then
                if not Dissapeared[i] then
                    TimeMissing[i] = os.clock() + 6
                    Dissapeared[i] = true
                end
                Drawed[i] = false
                Appeared[i] = false
            end
        end
    end
end
		

local _allyHeroes
function GetAllyHeroes()
    if _allyHeroes then return _allyHeroes end
    _allyHeroes = {}
    for i = 1, heroManager.iCount do
        local hero = heroManager:GetHero(i)
        if hero.team == myHero.team then
            table.insert(_allyHeroes, hero)
        end
    end
    return setmetatable(_allyHeroes,{
        __newindex = function(self, key, value)
            error("Adding to AllyHeroes is not granted. Use table.copy.")
        end,
    })
end

function TriggerTrap()
  for ID, ward in pairs(placedWards) do
    for i = 1, heroManager.iCount do
      local hero = heroManager:GetHero(i)

      if ward.trap and ward.team ~= hero.team and GetDistance(ward, hero) <= ward.triggerRange then
        placedWards[ID] = nil
      end
    end
  end

  DelayAction(TriggerTrap, 0.2)
end


function wards()
   local PingWards = HazMenu.Draw.Wards.PingWards
  local Pinged = false

	for ID, ward in pairs(placedWards) do
		if (GetTickCount() - ward.spawnTime) > ward.duration + 5000 or (ward.object and ward.object.health == 0) then
			placedWards[ID] = nil
		elseif (ward.team == TEAM_ENEMY or HazMenu.Draw.Wards.OwnTeam) and (ward.duration < math.huge or HazMenu.Draw.Wards.ShowPinks) and (not ward.trap or HazMenu.Draw.Wards.ShowTraps) then
      if PingWards and GetDistance(ward, mousePos) <= 1500 and (ward.lastPing == nil or GetGameTimer() - ward.lastPing > 20) then
        PingSignal(0, ward.x, ward.y, ward.z, PING_FALLBACK)

        ward.lastPing = GetGameTimer()
        Pinged = true
      end

			local minimapPosition = GetMinimap(ward)
			DrawTextWithBorder('.', 60, minimapPosition.x - 3, minimapPosition.y - 43, ward.color, blackColor)

			local x, y, onScreen = get2DFrom3D(ward.x, ward.y, ward.z)
			DrawTextWithBorder(TimerText((ward.duration - (GetTickCount() - ward.spawnTime)) / 1000), 20, x - 15, y - 11, ward.color, blackColor)
      if ward["creator"] then DrawTextWithBorder(ward["creator"].charName, 16, x - 20, y + 10, whiteColor, blackColor) end

			DrawCircle2(ward.x, ward.y, ward.z, 90, ward.color)
			if IsKeyDown(16) then
				DrawCircle2(ward.x, ward.y, ward.z, ward.visionRange, ward.color)
			end

		end
	end

  if Pinged then SendChat('wards there') end
end	
		
function DrawTextWithBorder(textToDraw, textSize, x, y, textColor, backgroundColor)
	DrawText(textToDraw, textSize, x + 1, y, backgroundColor)
	DrawText(textToDraw, textSize, x - 1, y, backgroundColor)
	DrawText(textToDraw, textSize, x, y - 1, backgroundColor)
	DrawText(textToDraw, textSize, x, y + 1, backgroundColor)
	DrawText(textToDraw, textSize, x , y, textColor)
end	


function get2DFrom3D(x, y, z)
    local pos = WorldToScreen(D3DXVECTOR3(x, y, z))
    return pos.x, pos.y, OnScreen(pos.x, pos.y)
end


function FindObjAt(x, y, z, distance, timediff, timestart)
  if not distance then distance = 1 end
  if not timediff then timediff = math.huge end
  if not timestart then timestart = GetTickCount() end

  for networkID, ward in pairs(placedWards) do
    if GetDistance(ward, Vector(x, y, z)) < distance and timestart - ward.spawnTime < timediff then return networkID end
  end

  return nil
end

function GetLandingPos(CastPoint)
	local wall = IsWall(D3DXVECTOR3(CastPoint.x, CastPoint.y, CastPoint.z))
	local Point = Vector(CastPoint)
	local StartPoint = Vector(Point)
        if not wall then return Point end
	for i = 0, 700, 10--[[Decrease for better precision, increase for less fps drops:]] do
		for theta = 0, 2 * math.pi + 0.2, 0.2 --[[Same :)]] do
			local c = Vector(StartPoint.x + i * math.cos(theta), StartPoint.y, StartPoint.z + i * math.sin(theta))
			if not IsWall(D3DXVECTOR3(c.x, c.y, c.z)) then
				return c
			end
		end
	end
	return Point
end

local types = {
  { duration=60 * 1000, sightRange=1350, triggerRange=70, charName="SightWard", name="YellowTrinket", spellName="RelicSmallLantern", color = aquaColor }, -- 1 minute trinket
  { duration=120 * 1000, sightRange=1350, triggerRange=70, charName="SightWard", name="YellowTrinketUpgrade", spellName="RelicLantern", color = aquaColor }, -- 2 minute trinket
  { duration=180 * 1000, sightRange=1350, triggerRange=70, charName="SightWard", name="SightWard", spellName="SightWard", color = greenColor }, -- 3 minute green ward
  { duration=180 * 1000, sightRange=1350, triggerRange=70, charName="SightWard", name="SightWard", spellName="wrigglelantern", color = greenColor }, -- 3 minute lantern ward
  { duration=180 * 1000, sightRange=1350, triggerRange=70, charName="VisionWard", name="SightWard", spellName="ItemGhostWard", color = greenColor }, -- 3 minute item ward
  { duration=math.huge, sightRange=1350, triggerRange=70, charName="VisionWard", name="VisionWard", spellName="VisionWard", color = purpleColor }, -- pink ward

  { duration=600 * 1000, sightRange=405, triggerRange=115, charName="Noxious Trap", name="TeemoMushroom", spellName="BantamTrap", color = whiteColor, trap = true }, -- teemo mushroom
  { duration=60 * 1000, sightRange=690, triggerRange=300, charName="Jack In The Box", name="ShacoBox", spellName="JackInTheBox", color = whiteColor, trap = true }, -- shaco trap
  { duration=240 * 1000, sightRange=150, triggerRange=150, charName="Cupcake Trap", name="CaitlynTrap", spellName="CaitlynYordleTrap", color = whiteColor, trap = true }, -- caitlyn trap
  { duration=240 * 1000, sightRange=0, triggerRange=150, charName="Noxious Trap", name="Nidalee_Spear", spellName="Bushwhack", color = whiteColor, trap = true } -- nidalee trap
}

function OnDeleteObj(object)
	if object and object.name and object.valid and object.type == "obj_AI_Minion" then

    for _,type in ipairs(types) do

      if object.name == type.charName and object.charName == type.name then

        local ID = FindObjAt(object.x, object.y, object.z) 

        if ID and object.health == 0 then
          placedWards[ID] = nil
        end
      end

    end

  end
end

COOLDOWN = GetGameTimer()

function PutWard(x, y, z, time)
  if GetGameTimer() - COOLDOWN < 1 then return end

  local ID = FindObjAt(x, y, z, 150)

  if ID == nil then
    placedWards["user:" .. GetTickCount()] = { x = x, y = y, z = z, visionRange = 1350, color = grayColor, 
                                                                              spawnTime = GetTickCount(), duration = time*1000, creator = nil, team = nil }
  end

  COOLDOWN = GetGameTimer()
end

function DeleteWard(x, y, z)
  if GetGameTimer() - COOLDOWN < 1 then return end

  local ID = FindObjAt(x, y, z, 100)

  if ID then placedWards[ID] = nil end

  COOLDOWN = GetGameTimer()
end

function OnCreateObj(object)

	if object and object.name and object.valid and object.type == "obj_AI_Minion" then

    DelayAction(function(object, timer, gtimer)

      for _,type in ipairs(types) do

        if object.name == type.charName and object.charName == type.name then

          local ID = FindObjAt(object.x, object.y, object.z, 1100, 500, timer)

          if object.health > 0 then
            if ID == nil then
              placedWards["create:" .. GetTickCount()] = { x = object.x, y = object.y, z = object.z, visionRange = type.sightRange, color = type.color, object = object, 
                triggerRange = type.triggerRange, spawnTime = timer, duration = type.duration, creator = nil, team = object.team, trap = type.trap }
            else
              placedWards[ID].x = object.x
              placedWards[ID].y = object.y
              placedWards[ID].z = object.z
            end
          end


        end

      end
    end, 1, { object, GetTickCount(), GetGameTimer() } )

  end
end
		
--THE END"), nil, "bt", _ENV))()
